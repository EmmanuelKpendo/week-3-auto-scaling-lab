AWSTemplateFormatVersion: '2010-09-09'
Description: Auto-scaling Apache web server with CPU-based scaling policies and lab tag

Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must be the name of an existing EC2 KeyPair
  VpcId:
    Description: ID of the VPC
    Type: AWS::EC2::VPC::Id
  PublicSubnet1:
    Description: Public subnet 1 for the load balancer
    Type: AWS::EC2::Subnet::Id
  PublicSubnet2:
    Description: Public subnet 2 for the load balancer
    Type: AWS::EC2::Subnet::Id
  PrivateSubnet1:
    Description: Private subnet 1 for the web servers
    Type: AWS::EC2::Subnet::Id
  PrivateSubnet2:
    Description: Private subnet 2 for the web servers
    Type: AWS::EC2::Subnet::Id
  LabTag:
    Description: Lab identifier tag
    Type: String
    Default: week2_lab1

Resources:
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access via the load balancer and SSH access
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !GetAtt LoadBalancerSecurityGroup.GroupId
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: lab
          Value: !Ref LabTag

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access to the load balancer
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: lab
          Value: !Ref LabTag

  WebServerLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: WebServerLaunchTemplate
      LaunchTemplateData:
        ImageId: ami-0c55b159cbfafe1f0 # Amazon Linux 2 AMI (update as needed)
        InstanceType: t2.micro
        KeyName: !Ref KeyName
        SecurityGroupIds:
          - !GetAtt WebServerSecurityGroup.GroupId
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: lab
                Value: !Ref LabTag
          - ResourceType: volume
            Tags:
              - Key: lab
                Value: !Ref LabTag
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            # Install Apache and stress tool
            yum update -y
            yum install -y httpd stress
            systemctl start httpd
            systemctl enable httpd
            
            # Create a simple web page that shows instance info
            INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
            IP_ADDRESS=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)
            
            cat > /var/www/html/index.html <<EOF
            <html>
            <head>
                <title>Apache Web Server (Auto scaling lab)</title>
            <style>
              body { text-align: center; padding: 3.5rem; }
              button { padding: 0.6rem 1.2rem; font-size: 1rem; margin: 1.2rem; cursor: pointer; }
              .info { font-size: 1.1rem; margin: 1.2rem; padding: 0.8rem; background: #f0f0f0; border-radius: 5px; }
            </style>
            </head>
            <body>
            <h1>Apache Web Server (Auto scaling lab)</h1>
            <div class="info">
              Hello from $IP_ADDRESS / $INSTANCE_ID
            </div>
            <button onclick="stressCPU()">Stress CPU</button>
            <script>
              function stressCPU() {
                fetch('/stress-cpu', { method: 'POST' }).then(response => {
                  if(response.ok) {
                    alert('CPU stress test started for 30 seconds! Watch for scaling activity.');
                  } else {
                    alert('Failed to start stress test.');
                  }
                })
                .catch(error => alert(`Error: ${error}`));
              }
            </script>
            </body>
            </html>
            EOF
            
            # Create endpoint for stress test
            cat > /var/www/html/stress-cpu <<EOF
            #!/bin/bash
            echo "Content-type: text/html"
            echo ""
            echo "<html><body>"
            echo "Starting CPU stress test for 30 seconds..."
            stress --cpu 1 --timeout 30 &
            echo "Done"
            echo "</body></html>"
            EOF
            
            chmod +x /var/www/html/stress-cpu

  WebServerAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: WebServerASG
      LaunchTemplate:
        LaunchTemplateId: !Ref WebServerLaunchTemplate
        Version: !GetAtt WebServerLaunchTemplate.LatestVersionNumber
      MinSize: 1
      MaxSize: 3
      DesiredCapacity: 1
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      TargetGroupARNs:
        - !Ref WebServerTargetGroup
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      Tags:
        - Key: lab
          Value: !Ref LabTag
          PropagateAtLaunch: true

  WebServerScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref WebServerAutoScalingGroup
      Cooldown: 60
      ScalingAdjustment: 1
      Tags:
        - Key: lab
          Value: !Ref LabTag

  WebServerScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref WebServerAutoScalingGroup
      Cooldown: 300
      ScalingAdjustment: -1
      Tags:
        - Key: lab
          Value: !Ref LabTag

  CPUHighAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Alarm when CPU exceeds 50%
      Namespace: AWS/EC2
      MetricName: CPUUtilization
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref WebServerAutoScalingGroup
      Statistic: Average
      Period: 60
      EvaluationPeriods: 2
      Threshold: 50
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref WebServerScaleUpPolicy
      Tags:
        - Key: lab
          Value: !Ref LabTag

  CPULowAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Alarm when CPU is less than 30%
      Namespace: AWS/EC2
      MetricName: CPUUtilization
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref WebServerAutoScalingGroup
      Statistic: Average
      Period: 60
      EvaluationPeriods: 2
      Threshold: 30
      ComparisonOperator: LessThanThreshold
      AlarmActions:
        - !Ref WebServerScaleDownPolicy
      Tags:
        - Key: lab
          Value: !Ref LabTag

  WebServerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: WebServerTargetGroup
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VpcId
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      TargetType: instance
      Tags:
        - Key: lab
          Value: !Ref LabTag

  WebServerLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: WebServerLoadBalancer
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !GetAtt LoadBalancerSecurityGroup.GroupId
      Scheme: internet-facing
      Type: application
      IpAddressType: ipv4
      Tags:
        - Key: lab
          Value: !Ref LabTag

  WebServerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WebServerTargetGroup
      LoadBalancerArn: !Ref WebServerLoadBalancer
      Port: 80
      Protocol: HTTP
      Tags:
        - Key: lab
          Value: !Ref LabTag

Outputs:
  LoadBalancerDNS:
    Description: The DNS name of the load balancer
    Value: !GetAtt WebServerLoadBalancer.DNSName
  LabTag:
    Description: The lab tag applied to all resources
    Value: !Ref LabTag